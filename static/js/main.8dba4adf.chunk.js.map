{"version":3,"sources":["Component/Header.js","Context/todo.js","Component/FormAddInput.js","Component/Todo.js","Component/TodoList.js","Reducers/TODOREDUCER.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","href","todosContext","React","createContext","FormAddTodo","props","TodosContext","useContext","useState","Text","SetText","onSubmit","e","preventDefault","dispatch","type","payload","value","onChange","target","placeholder","Todo","item","text","onClick","key","done","TodoList","StatusDone","SetStatusDone","filterTodos","Todos","filter","id","role","length","map","Key","donetodo","deleteitem","TodoReducer","state","action","DBtext","Date","now","add_todo","done_todo","dellet_todo","list","find","newlist","App","useReducer","useEffect","axios","get","then","res","jasonhadlet","data","forEach","addtodoDB","employee_name","todo","Provider","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8dba4adf.chunk.js","sourcesContent":["import React, {useContext} from \"react\";\r\n\r\nfunction Header() {\r\n\r\n    return (\r\n        <header>\r\n            <div className=\"navbar navbar-dark bg-dark shadow-sm\">\r\n                <div className=\"container d-flex justify-content-between\">\r\n                    <a href=\"#\" className=\"navbar-brand d-flex justify-content-center\">\r\n                       Todo App\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Header","import React from \"react\";\r\n\r\nconst todosContext = React.createContext({})\r\n\r\nexport default todosContext;","import React, {useContext, useState} from \"react\";\r\nimport todosContext from \"../Context/todo\";\r\nimport axios from \"axios\"\r\nfunction FormAddTodo(props) {\r\n    const TodosContext = useContext(todosContext)\r\n\r\n    const [Text, SetText] = useState('')\r\n    let inputhandler = e => SetText(e.target.value)\r\n    let formhandler = (e) => {\r\n        e.preventDefault()\r\n\r\n        TodosContext.dispatch({type: 'add_todo', payload: {Text: Text}})\r\n        SetText('')\r\n    }\r\n\r\n    return (\r\n        <form className=\"form-inline\" onSubmit={formhandler}>\r\n            <div className=\"form-group\">\r\n                <input type=\"text\" className=\"form-control mx-sm-3\" value={Text} onChange={inputhandler}\r\n                       placeholder=\"کار خود را وارد نمایید\"/>\r\n                <button type=\"submit\" className=\"btn btn-primary\">اضافه کردن</button>\r\n            </div>\r\n        </form>\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default FormAddTodo","import React, {useContext, useState} from \"react\";\r\nimport todosContext from \"../Context/todo\";\r\n\r\nfunction Todo(props) {\r\n    const TodosContext =useContext(todosContext)\r\n\r\n\r\n\r\n    return (\r\n                <div className=\"col-6 mb-2\">\r\n                    <div\r\n                        className=\"d-flex justify-content-between align-items-center border rounded p-3\">\r\n                        <div>\r\n                            {props.item.text}\r\n                        </div>\r\n                        <div>\r\n                            <button type=\"button\" className=\"btn btn-info btn-sm ml-1\"\r\n                                    onClick={() => TodosContext.dispatch({type:'done_todo',payload:{key:props.item.key}})}\r\n                            >{props.item.done ? \"بازگشت\" : 'انجام شده'}</button>\r\n                            <button type=\"button\" className=\"btn btn-danger btn-sm ml-1\"\r\n                                    onClick={() => TodosContext.dispatch({type:'dellet_todo',payload:{key:props.item.key}})}\r\n                            >پاک کردن\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n    )\r\n\r\n\r\n}\r\n\r\nexport default Todo","import React, {useContext, useState} from \"react\";\r\nimport Todo from \"./Todo\";\r\nimport todosContext from \"../Context/todo\";\r\n\r\nexport function TodoList(props) {\r\n    const [StatusDone, SetStatusDone] = useState(false);\r\n    const TodosContext = useContext(todosContext)\r\n    let filterTodos = TodosContext.Todos.filter(item => item.done === StatusDone)\r\n\r\n    return (\r\n        <>\r\n            <nav className=\"col-6 mb-3\">\r\n                <div className=\"nav nav-tabs\" id=\"nav-tab\" role=\"tablist\">\r\n                    <a className={`nav-item nav-link ${StatusDone ? \"\" : \"active\"} font-weight-bold`}\r\n                       id=\"nav-home-tab\" onClick={() => SetStatusDone(false)}>انجام نشده ها <span\r\n                         className=\"badge badge-secondary\">\r\n                        {TodosContext.Todos.filter(item => item.done === false).length}\r\n                       </span></a>\r\n                    <a className={`nav-item nav-link ${StatusDone ? \"active\" : \"\"} font-weight-bold`}\r\n                       id=\"nav-profile-tab\" onClick={() => SetStatusDone(true)}>انجام شده ها <span\r\n                        className=\"badge badge-success\">\r\n                        {TodosContext.Todos.filter(item => item.done === true).length}\r\n                       </span></a>\r\n                </div>\r\n            </nav>\r\n            {\r\n                filterTodos.length === 0 ?\r\n                    <p>خالی است</p> :\r\n                    filterTodos.map(item =>\r\n                        <Todo\r\n                            Key={item.key}\r\n                            item={item}\r\n                            donetodo={TodosContext.donetodo}\r\n                            deleteitem={TodosContext.deleteitem}\r\n                        />)\r\n            }\r\n\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\n\r\nexport function TodoReducer(state, action) {\r\n    switch (action.type) {\r\n        case 'init_todo':\r\n            let { DBtext } = action.payload;\r\n            return  {\r\n\r\n                Todos:[...state.Todos,{key: Date.now(), done: false, text: DBtext}]\r\n\r\n            }\r\n        case \"add_todo\":\r\n            return add_todo(state, action);\r\n\r\n        case 'done_todo':\r\n            return done_todo(state, action);\r\n        case \"dellet_todo\":\r\n            return dellet_todo(state, action);\r\n\r\n        default :\r\n            return\r\n            break;\r\n    }\r\n\r\n}\r\n\r\nlet add_todo = (state, action) => {\r\n    let {Text} = action.payload;\r\n    return {\r\n        ...state,\r\n        Todos: [\r\n            {key: Date.now(), done: false, text: Text}, ...state.Todos\r\n        ]\r\n    }\r\n\r\n}\r\n\r\n\r\nlet done_todo = (state, action) => {\r\n    let {key} = action.payload\r\n    let list = state.Todos.find(item => item.key === key)\r\n    let newlist = state.Todos.filter(item => item.key !== key)\r\n    list.done = !list.done\r\n return{\r\n     Todos : [...newlist, list]\r\n\r\n }\r\n}\r\n\r\nlet dellet_todo = (state, action) => {\r\n    let {key} = action.payload\r\n    return {\r\n        ...state,\r\n        Todos: state.Todos.filter(item => item.key !== key)\r\n    }\r\n\r\n}\r\n\r\n\r\n// let AddTodo = (Text) => {\r\n//     SetTodos([\r\n//         ...Todos, {key: Date.now(), done: false, text: Text}\r\n//     ])\r\n// }\r\n\r\n\r\n// let donetodo = (key) => {\r\n//     let list = Todos.find(item => item.key === key)\r\n//     let newlist = Todos.filter(item => item.key !== key)\r\n//     list.done = !list.done\r\n//     SetTodos([...newlist, list]\r\n//     )\r\n// }\r\n\r\n\r\n// let deleteitem = (key) => {\r\n//     SetTodos(prevState =>\r\n//         prevState.filter(item => item.key !== key)\r\n//     )\r\n// }","import React, {useContext, useEffect, useReducer, useState} from 'react';\r\nimport './App.css';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nimport Header from \"./Component/Header\";\r\nimport FormAddTodo from \"./Component/FormAddInput\";\r\nimport Todo from \"./Component/Todo\";\r\nimport {TodoList} from \"./Component/TodoList\";\r\nimport todosContext from \"./Context/todo\"\r\nimport {TodoReducer} from \"./Reducers/TODOREDUCER\";\r\nimport axios from \"axios\"\r\nexport default function App() {\r\n\r\n    const TodosContext = useContext(todosContext)\r\n\r\n\r\n\r\n    const [FormInput, SetForminput] = useState('')\r\n\r\n    const [state,dispatch]=useReducer(TodoReducer,{\r\n        Todos:[]\r\n    })\r\n    useEffect(()=>{\r\n        axios.get(\"http://dummy.restapiexample.com/api/v1/employees\")\r\n            .then( res=>jasonhadlet(res.data.data))\r\n\r\n    },[])\r\n\r\n    let  jasonhadlet =(data)=>{\r\n        data.forEach((item)=>{\r\n            addtodoDB(item.employee_name)\r\n        })\r\n    }\r\n    let addtodoDB=(DBtext)=>{\r\n        dispatch({type:'init_todo',payload:{DBtext:DBtext}})\r\n    }\r\n\r\n    return (\r\n        <todosContext.Provider value={{\r\n            Todos:state.Todos,\r\n            dispatch\r\n\r\n        }\r\n        }>\r\n            <div className=\"App\">\r\n                <Header/>\r\n                <main>\r\n                    <section className=\"jumbotron\">\r\n                        <div className=\"container d-flex flex-column align-items-center\">\r\n                            <h1 className=\"jumbotron-heading\">خوش امدید</h1>\r\n                            <p className=\"lead text-muted\">محمد طاهری</p>\r\n                            <FormAddTodo/>\r\n                        </div>\r\n                    </section>\r\n                    <div className=\"todosList\">\r\n                        <div className=\"container\">\r\n                            <div className=\"d-flex flex-column align-items-center \">\r\n                                <TodoList/>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </main>\r\n            </div>\r\n        </todosContext.Provider>\r\n\r\n    );\r\n}\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}